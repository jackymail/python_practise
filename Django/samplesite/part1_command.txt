  
pyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from polls.models import Question,Choice
>>> Qestion.object.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Qestion' is not defined
>>> Questions.object.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Questions' is not defined
>>> Question.object.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Question' has no attribute 'object'
>>> Question.objects.all()
<QuerySet []>
>>> from django.utils import timezone
>>> q = Question(question_text="what is New?",pub_date=timezone.now())
>>> q.s
q.save(               q.save_base(          q.serializable_value(
>>> q.save()
>>> q.id
1
>>> q.
q.check(                    q.get_deferred_fields(      q.question_text            
q.choice_set(               q.get_next_by_pub_date(     q.refresh_from_db(         
q.clean(                    q.get_previous_by_pub_date( q.save(                    
q.clean_fields(             q.id                        q.save_base(               
q.date_error_message(       q.MultipleObjectsReturned(  q.serializable_value(      
q.delete(                   q.objects                   q.unique_error_message(    
q.DoesNotExist(             q.pk                        q.validate_unique(         
q.from_db(                  q.prepare_database_save(   
q.full_clean(               q.pub_date                 
>>> q.question_text
q.question_text
>>> q.question_text
'what is New?'
>>> q.pub_date
q.pub_date
>>> q.pub_date
datetime.datetime(2017, 9, 29, 8, 33, 6, 908953, tzinfo=<UTC>)
>>> q.question_text
q.question_text
>>> q.question_text = "What's up"
>>> q.s
q.save(               q.save_base(          q.serializable_value(
>>> q.save
q.save(      q.save_base(
>>> q.save()
>>> Question(

>>> Question.objects
Question.objects
>>> Question.objects.a
Question.objects.aggregate(   Question.objects.annotate(   
Question.objects.all(         Question.objects.auto_created
>>> Question.objects.a
Question.objects.aggregate(   Question.objects.annotate(   
Question.objects.all(         Question.objects.auto_created
>>> Question.objects.all()
<QuerySet [<Question: Question object>]>
>>> Question.object.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Question' has no attribute 'object'
>>> Question.objects.all()
<QuerySet [<Question: Question object>]>
>>> Question(

>>> Question.objects
Question.objects
>>> Question.objects.all(

>>> Question.objects.all()
<QuerySet [<Question: Question object>]>
>>> quit()
yangzhiqiongs-MacBook-Pro:samplesite root# python3 manage.py shell
Python 3.6.2 (v3.6.2:5fd33b5926, Jul 16 2017, 20:11:06) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from polls.models import Question,Choice
>>> Question(

>>> Question.id
Question.id
>>> Question.objects
Question.objects
>>> Question.objects.a
Question.objects.aggregate(   Question.objects.annotate(   
Question.objects.all(         Question.objects.auto_created
>>> Question.objects.all()
<QuerySet [<Question: What's up>]>
>>> Question.objects
Question.objects
>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up>]>
>>> Question.objects.fi
Question.objects.filter( Question.objects.first( 
>>> Question.objects.fiter(question_text__startwith='What')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'fiter'
>>> Question.objects.fiter(question_text__startswith='What')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'fiter'
>>> Question.objects.filter(question_text__startswith='What')
<QuerySet [<Question: What's up>]>
>>> from django.utils import timezone
>>> current_yeaar = timezone.now().year
>>> Question.objects.get
Question.objects.get(           Question.objects.get_queryset( 
Question.objects.get_or_create(
>>> Question.objects.get(pub_date__year=current_year)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'current_year' is not defined
>>> Question.objects.get(pub_date__year=current_yeaar)
<Question: What's up>
>>> Question.
Question.add_to_class(             Question.mro(                     
Question.check(                    Question.MultipleObjectsReturned( 
Question.choice_set                Question.objects                  
Question.clean(                    Question.pk                       
Question.clean_fields(             Question.prepare_database_save(   
Question.date_error_message(       Question.pub_date                 
Question.delete(                   Question.question_text            
Question.DoesNotExist(             Question.refresh_from_db(         
Question.from_db(                  Question.save(                    
Question.full_clean(               Question.save_base(               
Question.get_deferred_fields(      Question.serializable_value(      
Question.get_next_by_pub_date(     Question.unique_error_message(    
Question.get_previous_by_pub_date( Question.validate_unique(         
Question.id                        Question.was_published_recently(  
>>> Question.objects
Question.objects
>>> Question.objects.get(id=2)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/query.py", line 380, in get
    self.model._meta.object_name
polls.models.DoesNotExist: Question matching query does not exist.
>>> Question.objects.get(id=2)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/query.py", line 380, in get
    self.model._meta.object_name
polls.models.DoesNotExist: Question matching query does not exist.
>>> Question.objects.get(id=1)
<Question: What's up>
>>> Question(

>>> Question.objects.get(pk=1)
<Question: What's up>
>>> q = Question.objects
Question.objects
>>> q = Question.objects.get(pk-1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'pk' is not defined
>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
True
>>> q.choice_set(

>>> q.choice_set.a
q.choice_set.add(         q.choice_set.all(         q.choice_set.auto_created
q.choice_set.aggregate(   q.choice_set.annotate(   
>>> q.choice_set.all(

>>> q.choice_set.all()  
<QuerySet []>
>>> q.choice_set(

>>> q.choice_set_create(choice_text='Not Much',votes=0)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Question' object has no attribute 'choice_set_create'
>>> q.choice_set_create(choice_text='Not Much',votes=0)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Question' object has no attribute 'choice_set_create'
>>> q.c
q.check(        q.choice_set(   q.clean(        q.clean_fields(
>>> q.choice_set(

>>> q.choice_set.all()
<QuerySet []>
>>> q.choice_set.count()
0
>>> Choice.objects.filter(question__pub_date__year=current_year)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'current_year' is not defined
>>> Choice.objects.filter(question__pub_date__year=current_yeaar)
<QuerySet []>
>>> c = q.ch
q.check(      q.choice_set(
>>> c = q.choice_set(

>>> c = q.choice_set.fi
q.choice_set.field   q.choice_set.filter( q.choice_set.first( 
>>> c = q.choice_set.filter(choice_text__startwith='The Clouds')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/query.py", line 784, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/query.py", line 802, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/sql/query.py", line 1250, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/sql/query.py", line 1276, in _add_q
    allow_joins=allow_joins, split_subq=split_subq,
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/sql/query.py", line 1210, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/sql/query.py", line 1102, in build_lookup
    lhs = self.try_transform(lhs, name, lookups)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/django/db/models/sql/query.py", line 1120, in try_transform
    (name, lhs.output_field.__class__.__name__))
django.core.exceptions.FieldError: Unsupported lookup 'startwith' for CharField or join on the field not permitted.
>>> c = q.choice_set.filter(choice_text__startswith='The Clouds')
>>> 
>>> 
>>> 
>>> c = q.Choice_set.filter(choice_text__startswith='The Clouds')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Question' object has no attribute 'Choice_set'
>>> q.choice_set.create(choice_text='Not Much',votes=0)
<Choice: Choice object>
>>> q.choice_set.create(choice_text='MORE',votes=2)
<Choice: Choice object>
>>> q.choice_set.create(choice_text='most',votes=3)
<Choice: Choice object>
>>> q.choice_set.count()
3
>>> c = q.choice_set.filter(choice_text__startswith='Not')
>>> 
>>> 
>>> q.choice_set.all()
<QuerySet [<Choice: Choice object>, <Choice: Choice object>, <Choice: Choice object>]>
>>> 
>>> 
>>> 
>>> q.choice_set.count()
3
>>> 
>>> 
>>> 
>>> q.choice_set.all()
<QuerySet [<Choice: Choice object>, <Choice: Choice object>, <Choice: Choice object>]>
>>> 

